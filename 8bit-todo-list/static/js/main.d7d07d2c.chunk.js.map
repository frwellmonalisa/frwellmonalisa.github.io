{"version":3,"sources":["components/TodosInList.js","components/AddTodoForm.js","components/ProgressBarForList.js","components/TodosFilter.js","components/List.js","components/AddListForm.js","components/Titles.js","app-helpers/insertOnIndex.js","app-helpers/findListById.js","app-helpers/updateLists.js","App.js","app-helpers/createNewList.js","app-helpers/createNewTodo.js","app-helpers/findTodoById.js","index.js"],"names":["TodosInList","todos","listID","onToggleTodo","onDeleteTodo","filteredTodos","filter","todo","isDone","className","map","id","name","onClick","AddTodoForm","props","handleChange","e","preventDefault","setState","target","value","handleSubmit","state","onAddTodo","isError","this","onSubmit","type","placeholder","onChange","autoComplete","Component","ProgressBarForList","todosCount","length","isDoneTodosCount","max","TodosFilter","onFilterTodo","htmlFor","required","disabled","hidden","List","handleFilterTodo","list","title","description","onDeleteList","style","marginTop","AddListForm","handleChangeTitle","handleChangeDescription","Titles","margin","Row","Col","md","href","rel","insertOnIndex","index","element","slice","findListById","lists","find","item","findIndex","updateLists","prevState","newLists","localStorage","setItem","JSON","stringify","App","handleAddList","newList","shortid","createNewList","handleDeleteList","filtered","handleAddTodo","newTodo","createNewTodo","listToEdit","listToEditIndex","editedList","handleToggleTodo","todoID","todoToEdit","todoToEditIndex","editedTodo","handleDeleteTodo","data","getItem","parse","lg","Container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7d07d2c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TodosInList = ({ todos, listID, onToggleTodo, onDeleteTodo, filter }) => {\n    let filteredTodos = [];\n\n    switch (filter) {\n        case \"all\":\n            filteredTodos = [...todos];\n            break;\n        case \"done\":\n            filteredTodos = todos.filter(todo => todo.isDone);\n            break;\n        case \"undone\":\n            filteredTodos = todos.filter(todo => !todo.isDone);\n            break;\n        default:\n            filteredTodos = [...todos];\n    }\n\n    return (\n        <ul className=\"nes-list is-disc\">\n            {filteredTodos.map(({ id, name, isDone }) => {\n                return isDone ? (\n                    <li key={id}>\n                        {name}{\" \"}\n                        <span\n                            className=\"nes-text is-success nes-pointer\"\n                            onClick={() => onToggleTodo(listID, id)}\n                        >\n                            [завершено]\n                        </span>{\" \"}\n                        -{\" \"}\n                        <span\n                            className=\"nes-text is-error nes-pointer\"\n                            onClick={() => onDeleteTodo(listID, id)}\n                        >\n                            [x]\n                        </span>\n                    </li>\n                ) : (\n                    <li key={id}>\n                        {name}{\" \"}\n                        <span\n                            className=\"nes-text is-error nes-pointer\"\n                            onClick={() => onToggleTodo(listID, id)}\n                        >\n                            [незавершено]\n                        </span>{\" \"}\n                        -{\" \"}\n                        <span\n                            className=\"nes-text is-error nes-pointer\"\n                            onClick={() => onDeleteTodo(listID, id)}\n                        >\n                            [x]\n                        </span>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default TodosInList;\n","import React, { Component } from \"react\";\n\nexport default class AddTodoForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: \"\",\n            isError: false,\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            name: e.target.value,\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        const { name } = this.state;\n\n        // Проверка на пустое поле названия списка\n        if (name === \"\") {\n            this.setState({\n                isError: true,\n            });\n\n            return;\n        }\n\n        this.props.onAddTodo(this.props.listID, name);\n\n        this.setState({\n            name: \"\",\n            isError: false,\n        });\n    };\n\n    render() {\n        const { isError } = this.state;\n\n        return (\n            <form onSubmit={this.handleSubmit} className=\"nes-field is-inline\">\n                <input\n                    type=\"text\"\n                    id=\"inline_field\"\n                    className={isError ? \"nes-input is-error\" : \"nes-input\"}\n                    placeholder={isError ? \"Пусто!\" : \"Добавить задачу\"}\n                    value={this.state.name}\n                    onChange={this.handleChange}\n                    autoComplete=\"off\"\n                />\n                <button type=\"submit\" className=\"nes-btn is-primary\">\n                    +\n                </button>\n            </form>\n        );\n    }\n}\n","import React, { Fragment } from \"react\";\n\nconst ProgressBarForList = ({ todos }) => {\n    const todosCount = todos.length;\n    const isDoneTodosCount = todos.filter(todo => todo.isDone).length;\n\n    return (\n        <Fragment>\n            <p className=\"progress-bar-label\">Ваш прогресс:</p>\n            <progress\n                className=\"nes-progress is-success\"\n                value={isDoneTodosCount}\n                max={todosCount}\n            >\n                dsdfsd\n            </progress>\n        </Fragment>\n    );\n};\n\nexport default ProgressBarForList;\n","import React from \"react\";\n\nconst TodosFilter = ({ onFilterTodo, filter }) => {\n    return (\n        <div className=\"form_part\">\n            <label htmlFor=\"filter_select\" className=\"filter_select\">\n                Фильтр:\n            </label>\n            <div className=\"nes-select is-dark\">\n                <select\n                    required\n                    id=\"filter_select\"\n                    className=\"filter_select\"\n                    onChange={e => onFilterTodo(e.target.value)}\n                    value={filter}\n                >\n                    <option value=\"\" disabled hidden>\n                        Показать\n                    </option>\n                    <option value=\"undone\" className=\"nes-pointer\">\n                        Невыполненные\n                    </option>\n                    <option value=\"done\" className=\"nes-pointer\">\n                        Выполненные\n                    </option>\n                    <option value=\"all\" className=\"nes-pointer\">\n                        Все\n                    </option>\n                </select>\n            </div>\n        </div>\n    );\n};\n\nexport default TodosFilter;\n","import React, { Component } from \"react\";\nimport TodosInList from \"./TodosInList\";\nimport AddTodoForm from \"./AddTodoForm\";\nimport ProgressBarForList from \"./ProgressBarForList\";\nimport TodosFilter from \"./TodosFilter\";\n\nexport default class List extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: \"\",\n        };\n    }\n\n    handleFilterTodo = (type) => {\n        this.setState({\n            filter: type,\n        });\n    };\n\n    render() {\n        const { list } = this.props;\n        const { title, description, todos } = list;\n        const {\n            onAddTodo,\n            onDeleteList,\n            onToggleTodo,\n            onDeleteTodo,\n        } = this.props;\n\n        return (\n            <div\n                className=\"nes-container is-dark with-title\"\n                style={{ marginTop: \"10px\" }}\n            >\n                <p className=\"title\">{title}</p>\n                <p>{description}</p>\n                {todos.length > 0 ? (\n                    <TodosInList\n                        todos={todos}\n                        listID={list.id}\n                        onDeleteTodo={onDeleteTodo}\n                        onToggleTodo={onToggleTodo}\n                        filter={this.state.filter}\n                    />\n                ) : (\n                    <p>Здесь пока ничего нет!</p>\n                )}\n\n                <AddTodoForm onAddTodo={onAddTodo} listID={list.id} />\n                {todos.length > 0 && <ProgressBarForList todos={todos} />}\n                {todos.length > 0 && (\n                    <TodosFilter\n                        onFilterTodo={this.handleFilterTodo}\n                        filter={this.state.filter}\n                    />\n                )}\n                <button\n                    className=\"nes-btn is-error col-12\"\n                    onClick={() => onDeleteList(list.id)}\n                >\n                    Удалить список\n                </button>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class AddListForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: \"\",\n            description: \"\",\n            isError: false,\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        const { title, description } = this.state;\n\n        // Проверка на пустое поле названия списка\n        if (title === \"\") {\n            this.setState({\n                isError: true,\n            });\n\n            return;\n        }\n\n        this.props.onSubmit(title, description);\n\n        this.setState({\n            title: \"\",\n            description: \"\",\n            isError: false,\n        });\n    };\n\n    handleChangeTitle = (e) => {\n        this.setState({\n            title: e.target.value,\n        });\n    };\n\n    handleChangeDescription = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    };\n\n    render() {\n        const { title, description, isError } = this.state;\n\n        return (\n            <div className=\"nes-container with-title\">\n                <p className=\"title\">Добавить</p>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"nes-field\">\n                        <label htmlFor=\"name_field\">Название списка:</label>\n                        <input\n                            type=\"text\"\n                            id=\"name_field\"\n                            className={\n                                isError ? \"nes-input is-error\" : \"nes-input\"\n                            }\n                            value={title}\n                            onChange={this.handleChangeTitle}\n                            autoComplete=\"off\"\n                            placeholder={\n                                isError\n                                    ? \"Имя списка не может быть пустым!\"\n                                    : \"Введите название\"\n                            }\n                        />\n                    </div>\n                    <label htmlFor=\"list-description\">Описание списка:</label>\n                    <textarea\n                        id=\"list-description\"\n                        className=\"nes-textarea\"\n                        value={description}\n                        onChange={this.handleChangeDescription}\n                    ></textarea>\n                    <button type=\"submit\" className=\"nes-btn is-primary\">\n                        Добавить\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport { Col } from \"react-bootstrap\";\n\nconst Titles = () => {\n    return (\n        <div className=\"nes-container with-title\" style={{ margin: \"1rem 0\" }}>\n            <p className=\"title\">Эбаут</p>\n            <Row>\n                <Col md={6}>\n                    <ul className=\"nes-list is-disc\">\n                        <li>\n                            Сделано с помощью{\" \"}\n                            <a\n                                href=\"https://reactjs.org/\"\n                                target=\"_blank\"\n                                rel=\"noreferrer noopener\"\n                            >\n                                React\n                            </a>\n                        </li>\n                        <li>\n                            Стилизовано с помощью{\" \"}\n                            <a\n                                href=\"https://nostalgic-css.github.io/NES.css/\"\n                                target=\"_blank\"\n                                rel=\"noreferrer noopener\"\n                            >\n                                NES.css\n                            </a>\n                        </li>\n                        <li>\n                            Разработано{\" \"}\n                            <a\n                                href=\"https://frwellmonalisa.github.io/\"\n                                target=\"_blank\"\n                                rel=\"noreferrer noopener\"\n                            >\n                                frwellmonalisa\n                            </a>\n                        </li>\n                        <li>\n                            Код на{\" \"}\n                            <a\n                                href=\"https://github.com/frwellmonalisa/8bit-todo-list\"\n                                target=\"_blank\"\n                                rel=\"noreferrer noopener\"\n                            >\n                                GitHub\n                            </a>\n                        </li>\n                    </ul>\n                </Col>\n                <Col\n                    md={6}\n                    className=\"d-flex align-items-center justify-content-center \"\n                >\n                    <i className=\"nes-octocat animate\"></i>\n                </Col>\n            </Row>\n        </div>\n    );\n};\n\nexport default Titles;\n","/**\n * Функция, вставляющая элемент на место index в список list и возвращающая новый массив\n *\n * @param list Список\n * @param index Индекс вставки\n * @param element Вставляемый элемент\n */\nexport const insertOnIndex = (list, index, element) => {\n    return [...list.slice(0, index), element, ...list.slice(index + 1)];\n};\n","/**\n * Найти список и его индекс по переданному id и вернуть в виде массива\n *\n * @param lists Список списков\n * @param id Переданный id\n */\nexport const findListById = (lists, id) => {\n    return [\n        lists.find((item) => item.id === id),\n        lists.findIndex((item) => item.id === id),\n    ];\n};\n","import { insertOnIndex } from \"./insertOnIndex\";\n\nexport const updateLists = (index, list) => (prevState) => {\n    const newLists = insertOnIndex(prevState.lists, index, list);\n\n    // Сохранение изменений в localStorage\n    localStorage.setItem(\"lists\", JSON.stringify(newLists));\n    return {\n        lists: newLists,\n    };\n};\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport List from \"./components/List\";\nimport AddListForm from \"./components/AddListForm\";\nimport Titles from \"./components/Titles\";\nimport { insertOnIndex } from \"./app-helpers/insertOnIndex\";\nimport { createNewTodo } from \"./app-helpers/createNewTodo\";\nimport { findListById } from \"./app-helpers/findListById\";\nimport { findTodoById } from \"./app-helpers/findTodoById\";\nimport { updateLists } from \"./app-helpers/updateLists\";\nimport { createNewList } from \"./app-helpers/createNewList\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lists: [],\n        };\n    }\n\n    componentDidMount() {\n        const data = localStorage.getItem(\"lists\");\n        const lists = data ? JSON.parse(data) : [];\n        this.setState({ lists: lists });\n    }\n\n    handleAddList = (title, description) => {\n        const newList = createNewList(title, description);\n\n        this.setState((prevState) => {\n            // Сохранение изменений в localStorage\n            localStorage.setItem(\n                \"lists\",\n                JSON.stringify([...prevState.lists, newList])\n            );\n\n            return {\n                lists: [...prevState.lists, newList],\n            };\n        });\n    };\n\n    handleDeleteList = (listID) => {\n        const filtered = this.state.lists.filter((list) => list.id !== listID);\n        this.setState({\n            lists: filtered,\n        });\n\n        // Сохранение изменений в localStorage\n        localStorage.setItem(\"lists\", JSON.stringify(filtered));\n    };\n\n    handleAddTodo = (listID, name) => {\n        const newTodo = createNewTodo(name);\n\n        const [listToEdit, listToEditIndex] = findListById(\n            this.state.lists,\n            listID\n        );\n\n        // Создаем обновленный список\n        const editedList = {\n            ...listToEdit,\n            todos: [...listToEdit.todos, newTodo],\n        };\n\n        this.setState(updateLists(listToEditIndex, editedList));\n    };\n\n    handleToggleTodo = (listID, todoID) => {\n        const [listToEdit, listToEditIndex] = findListById(\n            this.state.lists,\n            listID\n        );\n        const [todoToEdit, todoToEditIndex] = findTodoById(\n            listToEdit.todos,\n            todoID\n        );\n\n        const editedTodo = { ...todoToEdit, isDone: !todoToEdit.isDone }; // Сам тоггл\n        const editedList = {\n            ...listToEdit,\n            todos: insertOnIndex(listToEdit.todos, todoToEditIndex, editedTodo),\n        }; // Вставка в список\n        this.setState(updateLists(listToEditIndex, editedList));\n    };\n\n    handleDeleteTodo = (listID, todoID) => {\n        const [listToEdit, listToEditIndex] = findListById(\n            this.state.lists,\n            listID\n        );\n\n        const editedList = {\n            ...listToEdit,\n            todos: listToEdit.todos.filter((todo) => todo.id !== todoID),\n        };\n\n        this.setState(updateLists(listToEditIndex, editedList));\n    };\n\n    render() {\n        const lists = this.state.lists.map((list) => (\n            <Col lg={6} key={list.id}>\n                <List\n                    list={list}\n                    onAddTodo={this.handleAddTodo}\n                    onDeleteList={this.handleDeleteList}\n                    onToggleTodo={this.handleToggleTodo}\n                    onDeleteTodo={this.handleDeleteTodo}\n                />\n            </Col>\n        ));\n\n        return (\n            <Container>\n                <Row className=\"my-4\">\n                    <Col>\n                        <h1 className=\"text-center\">8Bit ToDo List</h1>\n                        <div className=\"nes-container is-dark is-centered\">\n                            <p>\n                                Привет! Это классический туду лист. Он настолько\n                                классический, что даже оформление у него в духе\n                                игр 8-битной эпохи. Заведи свои списки прямо\n                                сейчас! Данные будут храниться в твоем браузере,\n                                пока ты не почистишь кэш.\n                            </p>\n                        </div>\n                    </Col>\n                </Row>\n                <Row className=\"my-4\">\n                    <Col md={4}>\n                        <div className=\"nes-balloon from-left\">\n                            <p>\n                                Воспользуйся формой рядом со мной, чтобы\n                                добавить новый список!\n                            </p>\n                        </div>\n                        <i className=\"nes-mario\"></i>\n                    </Col>\n                    <Col md={8}>\n                        <AddListForm onSubmit={this.handleAddList} />\n                    </Col>\n                </Row>\n                <Row>{lists}</Row>\n                <Titles />\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","import shortid from \"shortid\";\n\nexport const createNewList = (title, description) => {\n    return { id: shortid(), title, description, todos: [] };\n};\n","import shortid from \"shortid\";\n\nexport const createNewTodo = (name) => {\n    return { id: shortid(), name, isDone: false };\n};\n","/**\n * Найти todo в todo листе и его индекс по переданному id и вернуть в виде массива\n *\n * @param list ToDo лист\n * @param id Переданный ID\n */\nexport const findTodoById = (list, id) => {\n    return [\n        list.find((item) => item.id === id),\n        list.findIndex((item) => item.id === id),\n    ];\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap-grid.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}